{"version":3,"sources":["components/Button.js","components/Header.js","components/Task.js","components/Tasks.js","components/AddTask.js","App.js","registerServiceWorker.js","index.js"],"names":["Button","props","onClick","className","style","backgroundColor","color","text","defaultProps","Header","title","showAdd","onAdd","Task","task","reminder","onDoubleClick","onToggle","id","cursor","onDelete","day","Tasks","tasks","map","key","AddTask","useState","setText","setDay","setReminder","onSubmit","e","preventDefault","alert","type","placeholder","value","onChange","target","checked","currentTarget","App","showForm","setShowForm","setTasks","Math","floor","random","newTask","length","filter","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","catch","error","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.0f094c5b.chunk.js","sourcesContent":["import React from 'react'\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Button = (props) => {\r\n    return <button onClick={props.onClick} className='btn' style={{backgroundColor:props.color}}>{props.text}</button>\r\n}\r\n\r\nButton.defaultProps = {\r\n    color:'blue'\r\n}\r\n\r\nButton.propTypes = {\r\n    color:PropTypes.string,\r\n    text:PropTypes.string.isRequired,\r\n    onClick:PropTypes.func.isRequired\r\n}\r\n\r\nexport default Button\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport Button from './Button';\r\n\r\nconst Header = (props) => {\r\n     \r\n\r\n    return (\r\n        <header className='header'>\r\n            <h1>{props.title}</h1>\r\n            <Button color={props.showAdd ? 'red' : 'green'} text={props.showAdd ? 'Close' : 'Add'} onClick={props.onAdd} />   \r\n        </header>\r\n    )\r\n}\r\n\r\nHeader.defaultProps = {\r\n    title : 'Task Tracker'\r\n}\r\n\r\n// define types of props and also used required\r\nHeader.propTypes = {\r\n    title: PropTypes.string.isRequired\r\n}\r\n\r\nexport default Header\r\n","import React from 'react'\r\nimport {FaTimes} from 'react-icons/fa';\r\n\r\nconst Task = (props) => {\r\n    return (\r\n        <div className={`task ${props.task.reminder ? 'reminder':''}`} onDoubleClick={() => props.onToggle(props.task.id)}>\r\n            <h3>{props.task.text} <FaTimes style={{color:'red',cursor:'pointer'}} onClick={() => props.onDelete(props.task.id)} /></h3>\r\n            <p>{props.task.day}</p>  \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Task\r\n","import React from 'react';\r\nimport Task from './Task';\r\n\r\nconst Tasks = (props) => {\r\n    return (\r\n        <div>\r\n            {props.tasks.map((task) => (<Task key={task.id} task={task} onDelete={props.onDelete} onToggle={props.onToggle} />))}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Tasks\r\n","import React from 'react'\r\nimport {useState} from 'react';\r\n\r\nconst AddTask = (props) => {\r\n    const [text, setText] = useState('');\r\n    const [day, setDay] = useState('');\r\n    const [reminder, setReminder] = useState(false);\r\n\r\n    const onSubmit = (e) => {\r\n        e.preventDefault();\r\n\r\n        if(!text){\r\n            alert('Please add task');\r\n            return\r\n        }\r\n\r\n        props.onAdd({text, day, reminder});\r\n\r\n        setText('');\r\n        setDay('');\r\n        setReminder(false);\r\n    }\r\n    return (\r\n        <form className='add-form' onSubmit={onSubmit}>\r\n            <div className='form-control'>\r\n                <label>Task</label>\r\n                <input type='text' placeholder='Add Task' value={text} onChange={(e) => setText(e.target.value)} />            \r\n            </div>\r\n\r\n            <div className='form-control'>\r\n                <label>Day & Time</label>\r\n                <input type='text' placeholder='Add Day & Time' value={day} onChange={(e) => setDay(e.target.value)} />            \r\n            </div>\r\n\r\n            <div className='form-control form-control-check'>\r\n                <label>Reminder</label>\r\n                <input type='checkbox' checked={reminder} value={reminder} onChange={(e) => setReminder(e.currentTarget.checked)} />            \r\n            </div>\r\n\r\n            <input type='submit' value='Save Task' className='btn btn-block' /> \r\n        </form>\r\n    )\r\n}\r\n\r\nexport default AddTask\r\n","import React from 'react';\nimport {useState} from 'react';\nimport './App.css';\nimport Header from './components/Header';\nimport Tasks from './components/Tasks';\nimport AddTask from './components/AddTask';\n\nconst App = () =>{\n\n  const [showForm, setShowForm] = useState(false);\n  const [tasks, setTasks] = useState([\n    {\n        id:1,\n        text:'task 1',\n        day:'12 Jun 2021',\n        reminder:true\n    },\n    {\n        id:2,\n        text:'task 2',\n        day:'15 Jun 2021',\n        reminder:false\n    },\n    {\n        id:3,\n        text:'task 3',\n        day:'18 Jun 2021',\n        reminder:true\n    }\n])\n\n\n  // delete task\n  const deleteTask = (id) => {\n    setTasks(tasks.filter((task) => task.id !== id ));\n  }\n\n  // toggle reminder\n  const toggleReminder = (id) => {\n    setTasks(tasks.map((task) => task.id === id ? { ...task, reminder : !task.reminder} : task));  \n  }\n\n  // add task\n\n  const addTask = (task) => {\n    const id = Math.floor(Math.random() * 10000 + 1);\n    const newTask = {id, ...task};\n    setTasks([...tasks, newTask]);\n  }\n\n  \n\n  return (\n    <div className=\"container\">\n        <Header onAdd={() => setShowForm(!showForm)} showAdd={showForm} />\n        {showForm && <AddTask onAdd={addTask} />}\n        {tasks.length > 0 ? <Tasks tasks={tasks} onDelete={deleteTask} onToggle={toggleReminder}/> : <p>No Tasks</p>}\n    </div>\n  )\n}\n\nexport default App;","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (!isLocalhost) {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      } else {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nregisterServiceWorker();\n"],"sourceRoot":""}