{"version":3,"sources":["components/Button.js","components/Header.js","components/Task.js","components/Tasks.js","components/AddTask.js","components/Footer.js","components/About.js","App.js","registerServiceWorker.js","index.js"],"names":["Button","props","onClick","className","style","backgroundColor","color","text","defaultProps","Header","location","useLocation","title","pathname","showAdd","onAdd","Task","task","reminder","onDoubleClick","onToggle","id","cursor","onDelete","day","Tasks","tasks","map","key","AddTask","useState","setText","setDay","setReminder","onSubmit","e","preventDefault","alert","type","placeholder","value","onChange","target","checked","currentTarget","Footer","to","About","App","showForm","setShowForm","setTasks","useEffect","a","fetchTasks","taskFromServer","getTasks","fetch","res","json","data","fetchTask","deleteTask","method","filter","toggleReminder","taskToToggle","updTask","headers","body","JSON","stringify","addTask","path","exact","render","length","component","isLocalhost","Boolean","window","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","catch","error","ReactDOM","document","getElementById","URL","process","origin","addEventListener","response","status","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.4ece466e.chunk.js","sourcesContent":["import React from 'react'\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Button = (props) => {\r\n    return <button onClick={props.onClick} className='btn' style={{backgroundColor:props.color}}>{props.text}</button>\r\n}\r\n\r\nButton.defaultProps = {\r\n    color:'blue'\r\n}\r\n\r\nButton.propTypes = {\r\n    color:PropTypes.string,\r\n    text:PropTypes.string.isRequired,\r\n    onClick:PropTypes.func.isRequired\r\n}\r\n\r\nexport default Button\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport Button from './Button';\r\nimport { useLocation } from 'react-router-dom';\r\n\r\nconst Header = (props) => {\r\n    const location = useLocation();\r\n    return (\r\n        <header className='header'>\r\n            <h1>{props.title}</h1>\r\n            {location.pathname === '/' && <Button color={props.showAdd ? 'red' : 'green'} text={props.showAdd ? 'Close' : 'Add'} onClick={props.onAdd} />}   \r\n        </header>\r\n    )\r\n}\r\n\r\nHeader.defaultProps = {\r\n    title : 'Task Tracker'\r\n}\r\n\r\n// define types of props and also used required\r\nHeader.propTypes = {\r\n    title: PropTypes.string.isRequired\r\n}\r\n\r\nexport default Header\r\n","import React from 'react'\r\nimport {FaTimes} from 'react-icons/fa';\r\n\r\nconst Task = (props) => {\r\n    return (\r\n        <div className={`task ${props.task.reminder ? 'reminder':''}`} onDoubleClick={() => props.onToggle(props.task.id)}>\r\n            <h3>{props.task.text} <FaTimes style={{color:'red',cursor:'pointer'}} onClick={() => props.onDelete(props.task.id)} /></h3>\r\n            <p>{props.task.day}</p>  \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Task\r\n","import React from 'react';\r\nimport Task from './Task';\r\n\r\nconst Tasks = (props) => {\r\n    return (\r\n        <div>\r\n            {props.tasks.map((task) => (<Task key={task.id} task={task} onDelete={props.onDelete} onToggle={props.onToggle} />))}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Tasks\r\n","import React from 'react'\r\nimport {useState} from 'react';\r\n\r\nconst AddTask = (props) => {\r\n    const [text, setText] = useState('');\r\n    const [day, setDay] = useState('');\r\n    const [reminder, setReminder] = useState(false);\r\n\r\n    const onSubmit = (e) => {\r\n        e.preventDefault();\r\n\r\n        if(!text){\r\n            alert('Please add task');\r\n            return\r\n        }\r\n\r\n        props.onAdd({text, day, reminder});\r\n\r\n        setText('');\r\n        setDay('');\r\n        setReminder(false);\r\n    }\r\n    return (\r\n        <form className='add-form' onSubmit={onSubmit}>\r\n            <div className='form-control'>\r\n                <label>Task</label>\r\n                <input type='text' placeholder='Add Task' value={text} onChange={(e) => setText(e.target.value)} />            \r\n            </div>\r\n\r\n            <div className='form-control'>\r\n                <label>Day & Time</label>\r\n                <input type='text' placeholder='Add Day & Time' value={day} onChange={(e) => setDay(e.target.value)} />            \r\n            </div>\r\n\r\n            <div className='form-control form-control-check'>\r\n                <label>Reminder</label>\r\n                <input type='checkbox' checked={reminder} value={reminder} onChange={(e) => setReminder(e.currentTarget.checked)} />            \r\n            </div>\r\n\r\n            <input type='submit' value='Save Task' className='btn btn-block' /> \r\n        </form>\r\n    )\r\n}\r\n\r\nexport default AddTask\r\n","import React from 'react'\r\nimport {Link} from 'react-router-dom';\r\n\r\nconst Footer = () => {\r\n    return (\r\n        <footer>\r\n            <p>Copyright &copy; 2021</p>\r\n            <Link to=\"/about\">About</Link>\r\n        </footer>\r\n    )\r\n}\r\n\r\nexport default Footer\r\n","import React from 'react'\r\nimport {Link} from 'react-router-dom';\r\n\r\nconst About = () => {\r\n    return (\r\n        <div className='about-page'>\r\n            <h4>Task Tracker</h4>\r\n            <h5>Version 1.0.0</h5>\r\n            <Link to=\"/\">Go Back</Link>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default About\r\n","import React from 'react';\nimport {useState, useEffect} from 'react';\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\nimport './App.css';\nimport Header from './components/Header';\nimport Tasks from './components/Tasks';\nimport AddTask from './components/AddTask';\nimport Footer from './components/Footer';\nimport About from './components/About';\n\nconst App = () =>{\n\n  const [showForm, setShowForm] = useState(false);\n  const [tasks, setTasks] = useState([]);\n\n  useEffect(() => {\n    const getTasks = async () => {\n      const taskFromServer = await fetchTasks();\n      setTasks(taskFromServer);\n    }\n\n    getTasks();\n  },[])\n\n  // fetch tasks\n  const fetchTasks = async () => {\n    const res = await fetch('http://localhost:5000/tasks');\n    const data = await res.json()\n    return data;\n  }\n\n  // fetch task\n  const fetchTask = async (id) => {\n    const res = await fetch(`http://localhost:5000/tasks/${id}`);\n    const data = await res.json()\n    return data;\n  }\n  \n\n  // delete task\n  const deleteTask = async (id) => {\n    await fetch(`http://localhost:5000/tasks/${id}`,{method:'DELETE'});\n    setTasks(tasks.filter((task) => task.id !== id ));\n  }\n\n  // toggle reminder\n  const toggleReminder = async (id) => {\n    const taskToToggle = await fetchTask(id);\n    const updTask = { ...taskToToggle, reminder: !taskToToggle.reminder}\n    const res = await fetch(`http://localhost:5000/tasks/${id}`,{\n      method:'PUT',\n      headers:{'Content-type':'application/json'},\n      body:JSON.stringify(updTask)\n    })\n\n    const data = await res.json();\n    setTasks(tasks.map((task) => task.id === id ? { ...task, reminder : data.reminder} : task));  \n  }\n\n  // add task\n  const addTask = async (task) => {\n    const res = await fetch('http://localhost:5000/tasks',\n    {\n      method:'POST',\n      headers:{'Content-type':'application/json'},\n      body:JSON.stringify(task)\n    })\n    const data = await res.json();\n    setTasks([...tasks,data]);\n    /* const id = Math.floor(Math.random() * 10000 + 1);\n    const newTask = {id, ...task};\n    setTasks([...tasks, newTask]); */\n  }\n\n  \n\n  return (\n    <Router>\n    <div className=\"container\">\n        <Header onAdd={() => setShowForm(!showForm)} showAdd={showForm} />\n        <Route path='/' exact render={(props) => (\n          <>\n            {showForm && <AddTask onAdd={addTask} />}\n            {tasks.length > 0 ? <Tasks tasks={tasks} onDelete={deleteTask} onToggle={toggleReminder}/> : <p>No Tasks</p>}  \n          </>\n        )} />\n        <Route  path='/about' component={About} /> \n        <Footer />\n    </div>\n    </Router>\n  )\n}\n\nexport default App;","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (!isLocalhost) {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      } else {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nregisterServiceWorker();\n"],"sourceRoot":""}